"use strict";
/******************************************************************************
 * This file was generated by langium-cli 1.1.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
exports.reflection = exports.RailsAstReflection = exports.isStringType = exports.StringType = exports.isScript = exports.Script = exports.isScalarType = exports.ScalarType = exports.isRails = exports.Rails = exports.isPrompt = exports.Prompt = exports.isOutput = exports.Output = exports.isOnFail = exports.OnFail = exports.isObjectType = exports.ObjectType = exports.isModel = exports.Model = exports.isListType = exports.ListType = exports.isIntegerType = exports.IntegerType = exports.isFormats = exports.Formats = exports.isFormat = exports.Format = exports.isCorrective = exports.Corrective = exports.isNonScalarType = exports.NonScalarType = void 0;
/* eslint-disable */
const langium_1 = require("langium");
exports.NonScalarType = 'NonScalarType';
function isNonScalarType(item) {
    return exports.reflection.isInstance(item, exports.NonScalarType);
}
exports.isNonScalarType = isNonScalarType;
exports.Corrective = 'Corrective';
function isCorrective(item) {
    return exports.reflection.isInstance(item, exports.Corrective);
}
exports.isCorrective = isCorrective;
exports.Format = 'Format';
function isFormat(item) {
    return exports.reflection.isInstance(item, exports.Format);
}
exports.isFormat = isFormat;
exports.Formats = 'Formats';
function isFormats(item) {
    return exports.reflection.isInstance(item, exports.Formats);
}
exports.isFormats = isFormats;
exports.IntegerType = 'IntegerType';
function isIntegerType(item) {
    return exports.reflection.isInstance(item, exports.IntegerType);
}
exports.isIntegerType = isIntegerType;
exports.ListType = 'ListType';
function isListType(item) {
    return exports.reflection.isInstance(item, exports.ListType);
}
exports.isListType = isListType;
exports.Model = 'Model';
function isModel(item) {
    return exports.reflection.isInstance(item, exports.Model);
}
exports.isModel = isModel;
exports.ObjectType = 'ObjectType';
function isObjectType(item) {
    return exports.reflection.isInstance(item, exports.ObjectType);
}
exports.isObjectType = isObjectType;
exports.OnFail = 'OnFail';
function isOnFail(item) {
    return exports.reflection.isInstance(item, exports.OnFail);
}
exports.isOnFail = isOnFail;
exports.Output = 'Output';
function isOutput(item) {
    return exports.reflection.isInstance(item, exports.Output);
}
exports.isOutput = isOutput;
exports.Prompt = 'Prompt';
function isPrompt(item) {
    return exports.reflection.isInstance(item, exports.Prompt);
}
exports.isPrompt = isPrompt;
exports.Rails = 'Rails';
function isRails(item) {
    return exports.reflection.isInstance(item, exports.Rails);
}
exports.isRails = isRails;
exports.ScalarType = 'ScalarType';
function isScalarType(item) {
    return exports.reflection.isInstance(item, exports.ScalarType);
}
exports.isScalarType = isScalarType;
exports.Script = 'Script';
function isScript(item) {
    return exports.reflection.isInstance(item, exports.Script);
}
exports.isScript = isScript;
exports.StringType = 'StringType';
function isStringType(item) {
    return exports.reflection.isInstance(item, exports.StringType);
}
exports.isStringType = isStringType;
class RailsAstReflection extends langium_1.AbstractAstReflection {
    getAllTypes() {
        return ['Corrective', 'Format', 'Formats', 'IntegerType', 'ListType', 'Model', 'NonScalarType', 'ObjectType', 'OnFail', 'Output', 'Prompt', 'Rails', 'ScalarType', 'Script', 'StringType'];
    }
    computeIsSubtype(subtype, supertype) {
        switch (subtype) {
            case exports.ListType:
            case exports.ObjectType: {
                return this.isSubtype(exports.NonScalarType, supertype);
            }
            default: {
                return false;
            }
        }
    }
    getReferenceType(refInfo) {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }
    getTypeMetaData(type) {
        switch (type) {
            case 'Formats': {
                return {
                    name: 'Formats',
                    mandatory: [
                        { name: 'format', type: 'array' }
                    ]
                };
            }
            case 'ListType': {
                return {
                    name: 'ListType',
                    mandatory: [
                        { name: 'elements', type: 'array' }
                    ]
                };
            }
            case 'ObjectType': {
                return {
                    name: 'ObjectType',
                    mandatory: [
                        { name: 'elements', type: 'array' }
                    ]
                };
            }
            case 'Output': {
                return {
                    name: 'Output',
                    mandatory: [
                        { name: 'element', type: 'array' }
                    ]
                };
            }
            case 'ScalarType': {
                return {
                    name: 'ScalarType',
                    mandatory: [
                        { name: 'element', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}
exports.RailsAstReflection = RailsAstReflection;
exports.reflection = new RailsAstReflection();
//# sourceMappingURL=ast.js.map