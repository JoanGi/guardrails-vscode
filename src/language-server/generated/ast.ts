/******************************************************************************
 * This file was generated by langium-cli 1.1.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import { AstNode, AbstractAstReflection, ReferenceInfo, TypeMetaData } from 'langium';

export type CorrectiveAction = 'exception' | 'filter' | 'fix' | 'fix_reask' | 'noop' | 'reask' | 'refrain';

export type Languages = 'c++' | 'go' | 'others' | 'python' | 'typescript';

export type NonScalarType = ListType | ObjectType;

export const NonScalarType = 'NonScalarType';

export function isNonScalarType(item: unknown): item is NonScalarType {
    return reflection.isInstance(item, NonScalarType);
}

export type QualityCriteria = 'alt-profinity-check' | 'bug-free-python' | 'bug-free-sql' | 'choice' | 'ends-with' | 'exclude-sql-predicates' | 'is-high-quality-translation' | 'lenght' | 'lowe-case' | 'one-line' | 'similar-to-document' | 'sql-column-presence' | 'two-words' | 'upper-case' | 'valid-choices' | 'valid-range' | 'valid-url';

export type Version = '1.0' | '1.1';

export interface Corrective extends AstNode {
    readonly $container: IntegerType;
    readonly $type: 'Corrective';
    name: CorrectiveAction
}

export const Corrective = 'Corrective';

export function isCorrective(item: unknown): item is Corrective {
    return reflection.isInstance(item, Corrective);
}

export interface Format extends AstNode {
    readonly $container: Formats;
    readonly $type: 'Format';
    name: QualityCriteria
}

export const Format = 'Format';

export function isFormat(item: unknown): item is Format {
    return reflection.isInstance(item, Format);
}

export interface Formats extends AstNode {
    readonly $container: IntegerType | ListType | ObjectType | StringType;
    readonly $type: 'Formats';
    format: Array<Format>
}

export const Formats = 'Formats';

export function isFormats(item: unknown): item is Formats {
    return reflection.isInstance(item, Formats);
}

export interface IntegerType extends AstNode {
    readonly $container: ScalarType;
    readonly $type: 'IntegerType';
    corrective?: Corrective
    desc: string
    fail?: OnFail
    format: Formats
    name: string
}

export const IntegerType = 'IntegerType';

export function isIntegerType(item: unknown): item is IntegerType {
    return reflection.isInstance(item, IntegerType);
}

export interface ListType extends AstNode {
    readonly $container: Output;
    readonly $type: 'ListType';
    elements: Array<ScalarType>
    format: Formats
    name: string
}

export const ListType = 'ListType';

export function isListType(item: unknown): item is ListType {
    return reflection.isInstance(item, ListType);
}

export interface Model extends AstNode {
    readonly $type: 'Model';
    rails: Rails
    version: Version
}

export const Model = 'Model';

export function isModel(item: unknown): item is Model {
    return reflection.isInstance(item, Model);
}

export interface ObjectType extends AstNode {
    readonly $container: Output;
    readonly $type: 'ObjectType';
    elements: Array<ScalarType>
    format: Formats
    name: string
}

export const ObjectType = 'ObjectType';

export function isObjectType(item: unknown): item is ObjectType {
    return reflection.isInstance(item, ObjectType);
}

export interface OnFail extends AstNode {
    readonly $container: IntegerType | StringType;
    readonly $type: 'OnFail';
    fail: QualityCriteria
}

export const OnFail = 'OnFail';

export function isOnFail(item: unknown): item is OnFail {
    return reflection.isInstance(item, OnFail);
}

export interface Output extends AstNode {
    readonly $container: Rails;
    readonly $type: 'Output';
    element: Array<NonScalarType>
    name: '<output>'
}

export const Output = 'Output';

export function isOutput(item: unknown): item is Output {
    return reflection.isInstance(item, Output);
}

export interface Prompt extends AstNode {
    readonly $container: Rails;
    readonly $type: 'Prompt';
    name: '<prompt>'
    prompt: string
}

export const Prompt = 'Prompt';

export function isPrompt(item: unknown): item is Prompt {
    return reflection.isInstance(item, Prompt);
}

export interface Rails extends AstNode {
    readonly $container: Model;
    readonly $type: 'Rails';
    output: Output
    prompt: Prompt
    script: Script
}

export const Rails = 'Rails';

export function isRails(item: unknown): item is Rails {
    return reflection.isInstance(item, Rails);
}

export interface ScalarType extends AstNode {
    readonly $container: ListType | ObjectType;
    readonly $type: 'ScalarType';
    element: Array<IntegerType | StringType>
}

export const ScalarType = 'ScalarType';

export function isScalarType(item: unknown): item is ScalarType {
    return reflection.isInstance(item, ScalarType);
}

export interface Script extends AstNode {
    readonly $container: Rails;
    readonly $type: 'Script';
    language: Languages
    name: '<script'
    script: string
}

export const Script = 'Script';

export function isScript(item: unknown): item is Script {
    return reflection.isInstance(item, Script);
}

export interface StringType extends AstNode {
    readonly $container: ScalarType;
    readonly $type: 'StringType';
    corrective?: CorrectiveAction
    desc: string
    fail?: OnFail
    format: Formats
    name: string
}

export const StringType = 'StringType';

export function isStringType(item: unknown): item is StringType {
    return reflection.isInstance(item, StringType);
}

export interface RailsAstType {
    Corrective: Corrective
    Format: Format
    Formats: Formats
    IntegerType: IntegerType
    ListType: ListType
    Model: Model
    NonScalarType: NonScalarType
    ObjectType: ObjectType
    OnFail: OnFail
    Output: Output
    Prompt: Prompt
    Rails: Rails
    ScalarType: ScalarType
    Script: Script
    StringType: StringType
}

export class RailsAstReflection extends AbstractAstReflection {

    getAllTypes(): string[] {
        return ['Corrective', 'Format', 'Formats', 'IntegerType', 'ListType', 'Model', 'NonScalarType', 'ObjectType', 'OnFail', 'Output', 'Prompt', 'Rails', 'ScalarType', 'Script', 'StringType'];
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        switch (subtype) {
            case ListType:
            case ObjectType: {
                return this.isSubtype(NonScalarType, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case 'Formats': {
                return {
                    name: 'Formats',
                    mandatory: [
                        { name: 'format', type: 'array' }
                    ]
                };
            }
            case 'ListType': {
                return {
                    name: 'ListType',
                    mandatory: [
                        { name: 'elements', type: 'array' }
                    ]
                };
            }
            case 'ObjectType': {
                return {
                    name: 'ObjectType',
                    mandatory: [
                        { name: 'elements', type: 'array' }
                    ]
                };
            }
            case 'Output': {
                return {
                    name: 'Output',
                    mandatory: [
                        { name: 'element', type: 'array' }
                    ]
                };
            }
            case 'ScalarType': {
                return {
                    name: 'ScalarType',
                    mandatory: [
                        { name: 'element', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}

export const reflection = new RailsAstReflection();
